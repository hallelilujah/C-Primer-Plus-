6.3
#include <iostream>
#include <cctype>
using namespace std;
int main()
{
	cout<<"please enter one of the following choices:"<<endl;
	cout<<"c) carnivore p) pianist"<<endl;
	cout<<"t) tree g) game"<<endl;
	char choice;
	cin>>choice;
	while(isalpha(choice))
	{
		switch(choice){
			case 'c':cout<<"a maple is a carnivore.";
					 break;
			case 'p':cout<<"a maple is a pianist.";
			         break;
			case 't':cout<<"a maple is a tree.";
			         break;
			case 'g':cout<<"a maple is a game.";
			         break;	
			default: cout<<"that is not a choice.";
			         cin.ignore();
		}
		cin>>choice;
	}
	return 0;
}

6.4
#include <iostream>
#include <cctype>
using namespace std;
const int strsize=20;
struct bop{
	char fullname[strsize];
	char title[strsize];
	char bopname[strsize];
	int preference;
};
int main()
{
	bop guests[5]={
	    {"Wimp Macho", "Teacher", "WMA", 0},
        {"Raki Rhodes", "Junior Programmer", "RHES", 1},
        {"Celia Laiter", "Professor", "MIPS", 2},
        {"Hoppy Hipman", "Analyst Trainee", "HPAN", 1},
        {"Pat Hand", "Animal Keeper", "LOOPY", 2}};
char ch;
cin>>ch;
while(isalpha(ch))
{
	switch(ch)
	{
		case 'a':for(int i=0;i<5;i++)
		         cout<<guests[i].fullname<<endl;
		break;
		case 'b':for(int i=0;i<5;i++)
		         cout<<guests[i].title<<endl;
		break;
		case 'c':for(int i=0;i<5;i++)
		         cout<<guests[i].bopname<<endl;
		break;
		case 'd':for(int i=0;i<5;i++)
		         if(guests[i].preference==1)
				 cout<<guests[i].fullname<<endl;
		break;
		case 'q':cout<<"bye"<<endl;
		cin.ignore();
	}
	cin>>ch;
}
	return 0;
}

6.5
#include <iostream> 
#include <cctype>
using namespace std;
int main()
{
	double income,tax;
	
	tax='w';
	cout<<tax<<endl;
	cin>>income;
	cout<<income;//此处是为了体现赋值和cin的区别 ，cin将非指定类型的输入标记为0 ，赋值语句则将其强制转换为对应类型； 

	while(cin>>income&&income>0)
	{
		if(income<=5000)tax=income*0.00;
		else if(income<=15000)tax=(income-5000)*0.10;
		else if(income<=35000)tax=10000*0.10+(income-15000)*0.15;
		else tax=10000*0.10+20000*0.15+(income-35000)*0.20;
		cout<<"your tax is: "<<tax<<endl;
	}
	return 0;
}

6.6
#include <iostream> 
#include <string>
using namespace std;
struct record{
	string patrons;
	double money;
};
int main()
{
	int num,j=0;
	cout<<"please enter patrons number: ";
	cin>>num.get();//吸收换行符 
	record *pt=new record[num];
	for(int i=0;i<num;i++)
	{
		cout<<"please enter patrons name: ";
		getline(cin,pt[i].patrons);
		cout<<"please enter patrons money: ";
		cin>>pt[i].money.get();
	};
	for(int i=0;i<num;i++)
	{
		if(pt[i].money>10000)
		{cout<<"grand patrons: "<<pt[i].patrons<<endl;
		cout<<"money: "<<pt[i].money<<endl;
		}
		else 
		continue;
		j++;
	}
	if(j==0)cout<<"grand patrons:none."<<endl;
	j=0;
	for(int i=0;i<num;i++)
	{
		if(pt[i].money<=10000)
		cout<<"patrons: "<<pt[i].patrons<<endl;
		else continue;
		j++;
	}
	if(j==0)cout<<"patrons:none."<<endl;
	delete [] pt;
	return 0;
}

6.7
#include <iostream> 
#include <cctype>
#include <string>
using namespace std;
int main()
{
	string words;//string以空格区分单词 只有遇到空格才重新计算
	unsigned int vowels = 0;
    unsigned int consonants = 0;
    unsigned int others = 0;
    while(cin>>words)
    {
    	if(!(isalpha(words[0])))
    		others++;
    	else if(words.size()==1&&words[0]=='q')
    	{
    		break;
		}
		else
		{
    		switch(words[0])
    	{
    		case 'a':
    		case 'o':
    		case 'e':
    		case 'i':
    		case 'v':
			case 'u': 
			{
				vowels++;
				break;
			}
			default: consonants++;
		}
		}
	}
	cout<<vowels<<"words begining with vowels"<<endl;
	cout<<consonants<<"words begining with consonants"<<endl;
	cout<<others<<"words begining with others"<<endl;
	return 0;
}

6.8
#include <iostream> 
#include <fstream>
using namespace std;
int main()
{
    int num=0;
    char letter;
	ifstream myfile;
    myfile.open("kk.txt");
    myfile>>letter;
    while(myfile.good())//good判断文件读写正常，且未到达文件末尾。good() 等价于 !(bad() || eof() || failed()) 
    {
    	++num;
    	cout<<letter;
    	myfile>>letter;
	}
	if(myfile.eof())cout<<"end of file reached.\n";//eof()用来检测是否到达文件尾，如果到达文件尾返回非0值，否则返回0。 
    myfile.close();
    cout<<"kk.txt have "<<num<<"letters";
	return 0;
}

6.9
#include <iostream> 
#include <fstream>
#include <string>
using namespace std;
struct record{
	string patrons;
	double money;
};
int main()
{
    int num,j=0;
    double money;
    string letter;
	ifstream myfile;
    myfile.open("kk.txt");
    (myfile>>num).get();
    record *pt=new record[num];
    for(int i=0;i<num;i++)//good判断文件读写正常，且未到达文件末尾。good() 等价于 !(bad() || eof() || failed()) 
    {
    	getline(myfile,pt[i].patrons);
    	(myfile>>money).get();
    	pt[i].money=money;
	}
	if(myfile.eof())cout<<"end of file reached.\n";//eof()用来检测是否到达文件尾，如果到达文件尾返回非0值，否则返回0。 
    myfile.close();
    for(int i=0;i<num;i++)
	{
		if(pt[i].money>10000)
		{cout<<"grand patrons: "<<pt[i].patrons<<endl;
		cout<<"money: "<<pt[i].money<<endl;
		}
		else 
		continue;
		j++;
	}
	if(j==0)cout<<"grand patrons:none."<<endl;
	j=0;
	for(int i=0;i<num;i++)
	{
		if(pt[i].money<=10000)
		cout<<"patrons: "<<pt[i].patrons<<endl;
		else continue;
		j++;
	}
	if(j==0)cout<<"patrons:none."<<endl;
    delete [] pt;
	return 0;
}